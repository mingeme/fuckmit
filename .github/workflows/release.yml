name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: fuckmit
            asset_name: fuckmit-linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: fuckmit
            asset_name: fuckmit-linux-aarch64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: fuckmit
            asset_name: fuckmit-darwin-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: fuckmit
            asset_name: fuckmit-darwin-aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: fuckmit.exe
            asset_name: fuckmit-windows-x86_64

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          sudo apt-get install -y --no-install-recommends g++-aarch64-linux-gnu libc6-dev-arm64-cross

      - name: Build binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}
          use-cross: ${{ matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu' }}

      - name: Get tag version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Prepare binary
        shell: bash
        run: |
          # Extract version without the 'v' prefix
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          VERSION_NO_V="${VERSION#v}"
          
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            # For Windows
            VERSIONED_NAME="${{ matrix.asset_name }}-${VERSION_NO_V}.exe"
            cp "target/${{ matrix.target }}/release/${{ matrix.artifact_name }}" "$VERSIONED_NAME"
            echo "FINAL_ASSET_NAME=$VERSIONED_NAME" >> $GITHUB_ENV
          else
            # For Linux/macOS
            # Create tar.gz archive
            mkdir -p release_pkg
            cp "target/${{ matrix.target }}/release/${{ matrix.artifact_name }}" release_pkg/fuckmit
            chmod +x release_pkg/fuckmit
            ARCHIVE_NAME="${{ matrix.asset_name }}-${VERSION_NO_V}.tar.gz"
            tar -czf "$ARCHIVE_NAME" -C release_pkg .
            echo "FINAL_ASSET_NAME=$ARCHIVE_NAME" >> $GITHUB_ENV
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          files: ${{ env.FINAL_ASSET_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
